/**
 * User Service contract
 * This is a sample specification for user service
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Skill'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Skill'));
  } else {
    // Browser globals (root is window)
    if (!root.CodegenSkillsApi) {
      root.CodegenSkillsApi = {};
    }
    root.CodegenSkillsApi.SkillApi = factory(root.CodegenSkillsApi.ApiClient, root.CodegenSkillsApi.Skill);
  }
}(this, function(ApiClient, Skill) {
  'use strict';

  /**
   * Skill service.
   * @module api/SkillApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SkillApi. 
   * @alias module:api/SkillApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSkill operation.
     * @callback module:api/SkillApi~createSkillCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Skill>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new skill
     * @param {Object} opts Optional parameters
     * @param {module:model/Skill} opts.skill The skill data
     * @param {module:api/SkillApi~createSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Skill>}
     */
    this.createSkill = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['skill'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Skill];

      return this.apiClient.callApi(
        '/skill', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSkill operation.
     * @callback module:api/SkillApi~deleteSkillCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Skill>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a skill
     * 
     * @param {Number} skillId Skill id to delete
     * @param {module:api/SkillApi~deleteSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Skill>}
     */
    this.deleteSkill = function(skillId, callback) {
      var postBody = null;

      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling deleteSkill");
      }


      var pathParams = {
        'skillId': skillId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Skill];

      return this.apiClient.callApi(
        '/skill', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSkillById operation.
     * @callback module:api/SkillApi~getSkillByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Skill} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find skill by ID
     * Returns a single skill
     * @param {Number} skillId ID of skill to return
     * @param {module:api/SkillApi~getSkillByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Skill}
     */
    this.getSkillById = function(skillId, callback) {
      var postBody = null;

      // verify the required parameter 'skillId' is set
      if (skillId === undefined || skillId === null) {
        throw new Error("Missing the required parameter 'skillId' when calling getSkillById");
      }


      var pathParams = {
        'skillId': skillId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Skill;

      return this.apiClient.callApi(
        '/skill/{skillId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSkills operation.
     * @callback module:api/SkillApi~getSkillsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Skill>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of skill
     * 
     * @param {module:api/SkillApi~getSkillsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Skill>}
     */
    this.getSkills = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['*/*'];
      var accepts = ['application/json'];
      var returnType = [Skill];

      return this.apiClient.callApi(
        '/skill', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSkill operation.
     * @callback module:api/SkillApi~updateSkillCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Skill>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing skill
     * 
     * @param {module:model/Skill} name 
     * @param {module:api/SkillApi~updateSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Skill>}
     */
    this.updateSkill = function(name, callback) {
      var postBody = name;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateSkill");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Skill];

      return this.apiClient.callApi(
        '/skill', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
