buildscript {
    repositories {
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/content/repositories/central" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/jcenter/content/" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/central/content/" }
    }
    dependencies {
        classpath group: 'io.swagger', name: 'swagger-codegen', version: swaggerCodegen
    }
}

apply plugin: 'base'

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

subprojects {
    repositories {
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/content/repositories/central" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/jcenter/content/" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/central/content/" }
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
        compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

project(serviceServer) {
    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
        compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
    }
    if (project.hasProperty('generate')) {
        task generateServer {
            doLast {
                println "********** Swagger generate Server **************"
                def dirName = "${rootDir}/${serviceServer}"
                file(dirName).list().each {
                    delete "${dirName}/${it}"
                }
                def config = new CodegenConfigurator()
                config.setLang("spring")
                config.setApiPackage("${rootProject.group}.service.api")
                // Package to be used for the API interfaces
                config.setModelPackage("${rootProject.group}.service.model")
                // Package to be used for the API models
                config.setInputSpec("${rootDir}/api/swagger.yml") // The swagger API file
                config.setOutputDir(dirName)
                // The output directory, user-service-contract/build/user-service-server/
                config.setAdditionalProperties([
                        'dateLibrary'  : 'java8', // Date library to use
                        'useTags'      : 'true',  // Use tags for the naming
                        'interfaceOnly': 'true'   // Generating the Controller API interface and the models only
                ])
                new DefaultGenerator().opts(config.toClientOptInput()).generate() // Executing the generation
            }
        }
        task generateClient {
            doLast {
                println "********** Swagger generate Client **************"
                def dirName = "${rootDir}/frontend/generate"
                file(dirName).list().each {
                    delete "${dirName}/${it}"
                }
                def configFront = new CodegenConfigurator()
                configFront.setLang("javascript")
                configFront.setApiPackage("")
                // Package to be used for the API interfaces
                configFront.setModelPackage("")
                // Package to be used for the API models
                configFront.setInputSpec("${rootDir}/api/swagger.yml") // The swagger API file
                configFront.setOutputDir(dirName)
                // The output directory, user-service-contract/build/user-service-server/
                configFront.setAdditionalProperties([
                        'projectName'  : 'codegen-skills-api', // Date library to use
                        'projectDescription': 'This project just test swagger',
                        'projectVersion': version
                ])
                new DefaultGenerator().opts(configFront.toClientOptInput()).generate() // Executing the generation
            }
        }
        compileJava.dependsOn('generateServer')
        compileJava.dependsOn('generateClient')
    }
}