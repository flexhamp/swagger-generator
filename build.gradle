buildscript {
    repositories {
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/content/repositories/central" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/jcenter/content/" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/central/content/" }
    }
    dependencies {
        classpath group: 'io.swagger', name: 'swagger-codegen', version: swaggerCodegen
    }
}

apply plugin: 'base'

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

subprojects {
    repositories {
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/content/repositories/central" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/jcenter/content/" }
        maven { url "http://sbtnexus.ca.sbrf.ru:8081/nexus/service/local/repositories/central/content/" }
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
        compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

project(serviceServer) {
    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
        compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
    }
    if (project.hasProperty('generate') || project.hasProperty('prod') || !project.hasProperty('dev')) {
        task generateServer {
            doLast {
                println "********** Swagger generate Server **************"
                def dirName = "${rootDir}/${serviceServer}"
                file(dirName).list().each {
                    delete "${dirName}/${it}"
                }
                def config = new CodegenConfigurator()
                config.setLang("spring")
                config.setApiPackage("${rootProject.group}.service.api")
                config.setModelPackage("${rootProject.group}.service.model")
                config.setInputSpec("${rootDir}/api/swagger.yml")
                config.setOutputDir(dirName)
                config.setAdditionalProperties([
                        'dateLibrary'  : 'java8',
                        'useTags'      : 'true',
                        'interfaceOnly': 'true'
                ])
                new DefaultGenerator().opts(config.toClientOptInput()).generate()
            }
        }
        task generateClient {
            doLast {
                println "********** Swagger generate Client **************"
                def dirName = "${rootDir}/frontend/generate"
                file(dirName).list().each {
                    delete "${dirName}/${it}"
                }
                def configFront = new CodegenConfigurator()
                configFront.setLang("javascript")
                configFront.setApiPackage("")
                configFront.setModelPackage("")
                configFront.setInputSpec("${rootDir}/api/swagger.yml")
                configFront.setOutputDir(dirName)
                configFront.setAdditionalProperties([
                        'projectName'  : 'codegen-skills-api',
                        'projectDescription': 'This project just test swagger',
                        'projectVersion': version
                ])
                new DefaultGenerator().opts(configFront.toClientOptInput()).generate()
                copy {
                    println "********** Copy project.js ${dirName} **************"
                    from file("${rootDir}/frontend/package.json")
                    from file("${rootDir}/frontend/package-lock.json")
                    into file(dirName)
                }
                exec {
                    workingDir "${rootDir}/frontend/api"
                    commandLine 'npm.cmd', 'install'
                }
                exec {
                    println "********** NPM build-prod **************"
                    workingDir "${rootDir}/frontend/api"
                    commandLine 'npm.cmd', 'run', 'build-prod'
                }
            }
        }
        compileJava.dependsOn generateServer
        compileJava.dependsOn generateClient
    }
}